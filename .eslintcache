[{"/Users/ozgursayin/Desktop/Coding/React/forex/src/index.js":"1","/Users/ozgursayin/Desktop/Coding/React/forex/src/App.js":"2","/Users/ozgursayin/Desktop/Coding/React/forex/src/reportWebVitals.js":"3","/Users/ozgursayin/Desktop/Coding/React/forex/src/components/CurrencyConverter.jsx":"4","/Users/ozgursayin/Desktop/Coding/React/forex/src/components/TimeRangeSelector.jsx":"5","/Users/ozgursayin/Desktop/Coding/React/forex/src/components/Navbar.jsx":"6","/Users/ozgursayin/Desktop/Coding/React/forex/src/components/Home.jsx":"7","/Users/ozgursayin/Desktop/Coding/React/forex/src/components/CurrencyTable.jsx":"8","/Users/ozgursayin/Desktop/Coding/React/forex/src/components/Wallet.jsx":"9"},{"size":546,"mtime":1608487884926,"results":"10","hashOfConfig":"11"},{"size":657,"mtime":1608844320441,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1608486105969,"results":"13","hashOfConfig":"11"},{"size":7228,"mtime":1608922593391,"results":"14","hashOfConfig":"11"},{"size":839,"mtime":1608846553894,"results":"15","hashOfConfig":"11"},{"size":428,"mtime":1608844089842,"results":"16","hashOfConfig":"11"},{"size":3753,"mtime":1608923585762,"results":"17","hashOfConfig":"11"},{"size":6564,"mtime":1609000827671,"results":"18","hashOfConfig":"11"},{"size":7651,"mtime":1609004193477,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"lpmutj",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"22"},"/Users/ozgursayin/Desktop/Coding/React/forex/src/index.js",[],["45","46"],"/Users/ozgursayin/Desktop/Coding/React/forex/src/App.js",["47"],"import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport CurrencyConverter from \"./components/CurrencyConverter\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport Wallet from \"./components/Wallet\";\n\nconst App = () => {\n  return (\n    <div>\n      <BrowserRouter>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/charts\" component={CurrencyConverter} />\n\n          <Route path=\"/wallet\" component={Wallet} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","/Users/ozgursayin/Desktop/Coding/React/forex/src/reportWebVitals.js",[],"/Users/ozgursayin/Desktop/Coding/React/forex/src/components/CurrencyConverter.jsx",["48","49","50"],"import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport { Card, Dimmer, Loader, Select } from \"semantic-ui-react\";\nimport Chart from \"react-apexcharts\";\nimport TimeRangeSelector from \"./TimeRangeSelector\";\n\nconst CurrencyConverter = () => {\n  const [loading, setLoading] = useState(true);\n  const [priceData, setPriceData] = useState(null);\n  const [fromCurrency, setFromCurrency] = useState(\"USD\");\n  const [toCurrency, setToCurrency] = useState(\"TRY\");\n  const [chartData, setChartData] = useState(null);\n  const [series, setSeries] = useState(null);\n  const [timeRange, setTimeRange] = useState(new Date() - 86400000 * 30);\n\n  const BASE_URL_BITCOIN = `https://api.coindesk.com/v1/bpi/currentprice.json`;\n  const BASE_URL_CURRENCY = `https://api.exchangeratesapi.io/latest?`;\n  const HISTORICAL_BITCOIN_DATA = `https://api.coindesk.com/v1/bpi/historical/close.json`;\n  const HISTORICAL_CURRENCY_DATA = `https://api.exchangeratesapi.io/history`;\n\n  const options = [\n    { value: \"TRY\", text: \"TRY\" },\n    { value: \"USD\", text: \"USD\" },\n    { value: \"EUR\", text: \"EUR\" },\n    { value: \"GBP\", text: \"GBP\" },\n    // { value: \"BTC\", text: \"BTC\" },\n\n    { value: \"AUD\", text: \"AUD\" },\n    { value: \"SGD\", text: \"SGD\" },\n    { value: \"BGN\", text: \"BGN\" },\n    { value: \"BRL\", text: \"BRL\" },\n    { value: \"CAD\", text: \"CAD\" },\n    { value: \"CHF\", text: \"CHF\" },\n    { value: \"DKK\", text: \"DKK\" },\n    { value: \"HKD\", text: \"HKD\" },\n    { value: \"JPY\", text: \"JPY\" },\n    { value: \"SEK\", text: \"SEK\" },\n    { value: \"ISK\", text: \"ISK\" },\n    { value: \"PHP\", text: \"PHP\" },\n    { value: \"HUF\", text: \"HUF\" },\n    { value: \"CZK\", text: \"CZK\" },\n    { value: \"INR\", text: \"INR\" },\n    { value: \"CNY\", text: \"CNY\" },\n    { value: \"NZD\", text: \"NZD\" },\n    { value: \"MXN\", text: \"MXN\" },\n    { value: \"ILS\", text: \"ILS\" },\n    { value: \"IDR\", text: \"IDR\" },\n    { value: \"RUB\", text: \"RUB\" },\n  ];\n\n  const handleFromSelect = (e, data) => {\n    setFromCurrency(data.value);\n  };\n\n  const handleToSelect = (e, data) => {\n    setToCurrency(data.value);\n  };\n  const handleTimeRange = (days) => {\n    const dayInMilliseconds = 86400000;\n    const timeRange = new Date() - dayInMilliseconds * days;\n    setTimeRange(timeRange);\n  };\n  const dateConverter = (timeRange) => {\n    const date = new Date(timeRange);\n    const year = date.getFullYear();\n    const month = (\"0\" + (date.getMonth() + 1)).slice(-2);\n    const day = (\"0\" + date.getDate()).slice(-2);\n    const fullDate = `${year}-${month}-${day}`;\n    return fullDate;\n  };\n  const today = dateConverter(new Date());\n  const startDate = dateConverter(timeRange);\n\n  const getLatestCurrencyData = async () => {\n    const response = await fetch(\n      `${BASE_URL_CURRENCY}&base=${fromCurrency}&symbols=${toCurrency}`\n    );\n    const data = await response.json();\n\n    if (fromCurrency === \"EUR\" && toCurrency === \"EUR\") {\n      setPriceData(\"1.0000\");\n      return;\n    }\n    setPriceData(data.rates[toCurrency].toFixed(4));\n    setLoading(false);\n  };\n\n  const getHistoricalCurrencyData = async () => {\n    let response = \"\";\n    if (fromCurrency === \"EUR\" && toCurrency === \"EUR\") {\n      response = await fetch(\n        `${HISTORICAL_CURRENCY_DATA}?start_at=${startDate}&end_at=${today}&base=USD&symbols=USD`\n      );\n    } else {\n      response = await fetch(\n        `${HISTORICAL_CURRENCY_DATA}?start_at=${startDate}&end_at=${today}&base=${fromCurrency}&symbols=${toCurrency}`\n      );\n    }\n\n    const data = await response.json();\n    console.log(data.rates);\n    const orderedDates = {};\n    Object.keys(data.rates)\n      .sort(function (a, b) {\n        return a.split(\"-\").join(\"\").localeCompare(b.split(\"-\").join(\"\"));\n      })\n      .forEach(function (key) {\n        orderedDates[key] = data.rates[key];\n      });\n\n    const categories = Object.keys(orderedDates);\n    const seriesLong = Object.values(orderedDates);\n    console.log(categories, seriesLong);\n    const series = [];\n    seriesLong.forEach((serie) => {\n      series.push(\n        serie[toCurrency] !== undefined ? serie[toCurrency].toFixed(4) : 1\n      );\n    });\n    setChartData({\n      xaxis: {\n        categories: categories,\n      },\n    });\n    setSeries([{ text: fromCurrency, data: series }]);\n    setLoading(false);\n  };\n\n  // const getChartData = async () => {\n  //   const response = await fetch(HISTORICAL_BITCOIN_DATA);\n  //   const data = await response.json();\n  //   const categories = Object.keys(data.bpi);\n  //   const seriesLong = Object.keys(data.bpi);\n  //   console.log(data);\n  //   const series = [];\n  //   seriesLong.forEach((serie) => {\n  //     series.push(parseFloat(serie.toFixed(2)));\n  //   });\n\n  //   console.log(series);\n  //   setChartData({\n  //     xaxis: {\n  //       categories: categories,\n  //     },\n  //   });\n  //   setSeries([{ text: \"Bitcoin Price\", data: series }]);\n  //   setLoading(false);\n  // };\n  const fetchCurrentBitcoinData = async () => {\n    const response = await fetch(BASE_URL_BITCOIN);\n    const data = await response.json();\n\n    setPriceData(data.bpi[fromCurrency].rate);\n    console.log(data.bpi !== null && data.bpi[fromCurrency].rate);\n    //getChartData();\n    //getHistoricalCurrencyData();\n    setLoading(false);\n  };\n\n  // useEffect(() => {\n  //   fetchCurrentBitcoinData();\n  // }, []);\n\n  useEffect(() => {\n    getHistoricalCurrencyData();\n    getLatestCurrencyData();\n  }, [toCurrency, fromCurrency, timeRange]);\n\n  return (\n    <div className=\"App\">\n      {loading ? (\n        <div>\n          <Dimmer active inverted>\n            <Loader>Loading</Loader>\n          </Dimmer>\n        </div>\n      ) : (\n        <div className=\"price-container\">\n          <div className=\"form\">\n            <Select\n              placeholder=\"Select your currency\"\n              onChange={handleFromSelect}\n              options={options}\n              //defaultkey=\"USD\"\n              value={fromCurrency}\n            ></Select>\n            <Select\n              placeholder=\"Select your currency\"\n              onChange={handleToSelect}\n              options={options}\n              //defaultkey=\"TRY\"\n              value={toCurrency}\n            ></Select>\n          </div>\n\n          <div className=\"price\">\n            <Card>\n              <Card.Content>\n                <Card.Header> </Card.Header>\n                <Card.Description>\n                  1 {fromCurrency}\n                  {\" =  \"}\n                  <strong>{priceData}</strong>\n                  {\"   \"}\n                  <strong>{toCurrency}</strong>\n                  {\"   \"}\n                </Card.Description>\n              </Card.Content>\n              <div className=\"time-stamp\">\n                {new Date().toJSON().slice(0, 10)}\n                {\"  \"}\n                {new Date().toJSON().slice(11, 19)} GMT\n              </div>\n            </Card>\n          </div>\n        </div>\n      )}\n      <TimeRangeSelector handleTimeRange={handleTimeRange} />\n      <div>\n        {series && chartData ? (\n          <Chart\n            options={chartData}\n            series={series}\n            type=\"line\"\n            width=\"1200\"\n            height=\"300\"\n          />\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default CurrencyConverter;\n","/Users/ozgursayin/Desktop/Coding/React/forex/src/components/TimeRangeSelector.jsx",["51","52","53"],"import React from \"react\";\nimport { Button, Dimmer, Loader, Select } from \"semantic-ui-react\";\n\nconst TimeRangeSelector = ({ handleTimeRange }) => {\n  return (\n    <div className=\"time-range-buttons\">\n      {/* <Button onClick={() => handleTimeRange(365 * 5)}> 5 Years</Button> */}\n      <Button className=\"blue\" onClick={() => handleTimeRange(370)}>\n        1 Year\n      </Button>\n      <Button className=\"blue\" onClick={() => handleTimeRange(185)}>\n        6 Months\n      </Button>\n      <Button className=\"blue\" onClick={() => handleTimeRange(93)}>\n        3 Months\n      </Button>\n      <Button className=\"blue\" onClick={() => handleTimeRange(31)}>\n        1 Month\n      </Button>\n      <Button className=\"blue\" onClick={() => handleTimeRange(14)}>\n        2 Weeks\n      </Button>\n    </div>\n  );\n};\n\nexport default TimeRangeSelector;\n","/Users/ozgursayin/Desktop/Coding/React/forex/src/components/Navbar.jsx",[],"/Users/ozgursayin/Desktop/Coding/React/forex/src/components/Home.jsx",["54","55"],"import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport { Dimmer, Loader, Select } from \"semantic-ui-react\";\nimport CurrencyTable from \"./CurrencyTable\";\n\nconst Home = () => {\n  const [loading, setLoading] = useState(true);\n  const [priceData, setPriceData] = useState();\n  const [fromCurrency, setFromCurrency] = useState(\"TRY\");\n\n  const options = [\n    { value: \"TRY\", text: \"TRY\" },\n    { value: \"USD\", text: \"USD\" },\n    { value: \"EUR\", text: \"EUR\" },\n    { value: \"GBP\", text: \"GBP\" },\n    // { value: \"BTC\", text: \"BTC\" },\n\n    { value: \"AUD\", text: \"AUD\" },\n    { value: \"SGD\", text: \"SGD\" },\n    { value: \"BGN\", text: \"BGN\" },\n    { value: \"BRL\", text: \"BRL\" },\n    { value: \"CAD\", text: \"CAD\" },\n    { value: \"CHF\", text: \"CHF\" },\n    { value: \"DKK\", text: \"DKK\" },\n    { value: \"HKD\", text: \"HKD\" },\n    { value: \"JPY\", text: \"JPY\" },\n    { value: \"SEK\", text: \"SEK\" },\n    { value: \"ISK\", text: \"ISK\" },\n    { value: \"PHP\", text: \"PHP\" },\n    { value: \"HUF\", text: \"HUF\" },\n    { value: \"CZK\", text: \"CZK\" },\n    { value: \"INR\", text: \"INR\" },\n    { value: \"CNY\", text: \"CNY\" },\n    { value: \"NZD\", text: \"NZD\" },\n    { value: \"MXN\", text: \"MXN\" },\n    { value: \"ILS\", text: \"ILS\" },\n    { value: \"IDR\", text: \"IDR\" },\n    { value: \"RUB\", text: \"RUB\" },\n  ];\n\n  const BASE_URL_CURRENCY = `https://api.exchangeratesapi.io/latest?base=${fromCurrency}`;\n\n  const fetchCurrencies = async () => {\n    setLoading(true);\n    const result = await fetch(BASE_URL_CURRENCY);\n    const resultCurrencies = await result.json();\n    // if (fromCurrency === \"EUR\") {\n    //   setPriceData(\"1.0000\");\n    //   return;\n    // }\n    setPriceData(resultCurrencies);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchCurrencies();\n  }, []);\n\n  //   const getLatestCurrencyData = async () => {\n  //     const response = await fetch(`${BASE_URL_CURRENCY}&base=TRY`);\n  //     const data = await response.json();\n  //     // if (fromCurrency === \"EUR\" && toCurrency === \"EUR\") {\n  //     //   setPriceData(\"1.0000\");\n  //     //   return;\n  //     // }\n\n  //     Object.keys(data.rates).forEach((key) => {\n  //       console.log(key);\n  //     });\n  //     Object.values(data.rates).forEach((value) => {\n  //       console.log(value);\n  //     });\n  //     console.log(data.rates);\n  //     setPriceData(data.rates);\n  //     setLoading(false);\n  //   };\n\n  useEffect(() => {\n    fetchCurrencies();\n  }, [fromCurrency]);\n\n  if (priceData) {\n    Object.entries(priceData.rates).map(([key, value]) => ({\n      [key]: value,\n    }));\n  }\n\n  const handleFromSelect = (e, data) => {\n    setFromCurrency(data.value);\n  };\n\n  if (loading || !priceData) {\n    return <h1 style={{ color: \"white\" }}>Loading...</h1>;\n  }\n\n  return (\n    <div>\n      {loading ? (\n        <div>\n          <Dimmer active inverted>\n            <Loader>Loading</Loader>\n          </Dimmer>\n        </div>\n      ) : (\n        <div className=\"price-container\">\n          <div className=\"form\">\n            <Select\n              placeholder=\"Select your currency\"\n              onChange={handleFromSelect}\n              options={options}\n              //defaultValue=\"TRY\"\n              value={fromCurrency}\n            ></Select>\n            {/* <Select\n              placeholder=\"Select your currency\"\n              onChange={handleToSelect}\n              options={options}\n              defaultValue=\"TRY\"\n            ></Select> */}\n          </div>\n\n          <div className=\"time-stamp\">\n            {new Date().toJSON().slice(0, 10)}\n            {\"  \"}\n            {new Date().toJSON().slice(11, 19)} GMT\n          </div>\n        </div>\n      )}\n      <CurrencyTable baseCurrency={fromCurrency} priceData={priceData} />\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/ozgursayin/Desktop/Coding/React/forex/src/components/CurrencyTable.jsx",["56"],"import React, { useState, useEffect } from \"react\";\nimport { Button, Checkbox, Modal } from \"semantic-ui-react\";\nimport \"../App.css\";\n\nconst CurrencyTable = ({ baseCurrency, priceData }) => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [newCurrencies, setNewCurrencies] = useState([]);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([\n    { value: \"USD\", text: \"US Dollar\", id: 1 },\n    { value: \"EUR\", text: \"Euro\", id: 2 },\n    { value: \"GBP\", text: \"Pound Sterling\", id: 3 },\n  ]);\n\n  const [options, setOptions] = useState([\n    // { value: \"USD\", text: \"US Dollar\" },\n    // { value: \"EUR\", text: \"Euro\" },\n    // { value: \"GBP\", text: \"Pound Sterling\" },\n    // // { value: \"BTC\", text: \"BTC\" },\n    // { value: \"TRY\", text: \"Turkish Lira\" },\n    { value: \"AUD\", text: \"Australian Dollar\", id: 4 },\n    { value: \"SGD\", text: \"Singapore Dollar\", id: 5 },\n    { value: \"BRL\", text: \"Brazilian Real\", id: 6 },\n    { value: \"CAD\", text: \"Canadian Dollar\", id: 7 },\n    { value: \"CHF\", text: \"Swiss Franc\", id: 8 },\n    { value: \"DKK\", text: \"Denmark Kron\", id: 9 },\n    { value: \"HKD\", text: \"Hong Kong Dollar\", id: 10 },\n    { value: \"JPY\", text: \"Japanese Yen\", id: 11 },\n    { value: \"SEK\", text: \"Swedish Kron\", id: 12 },\n    { value: \"ISK\", text: \"Icelandic Kron\", id: 13 },\n    { value: \"PHP\", text: \"Philippine Peso\", id: 14 },\n    { value: \"HUF\", text: \"Hungarian Forint\", id: 15 },\n    { value: \"CZK\", text: \"Czech Kron\", id: 16 },\n    { value: \"INR\", text: \"Indian Rupee\", id: 17 },\n    { value: \"CNY\", text: \"Chinese Yuan\", id: 18 },\n    { value: \"NZD\", text: \"New Zealand Dollar\", id: 19 },\n    { value: \"MXN\", text: \"Mexican Peso\", id: 20 },\n    { value: \"ILS\", text: \"Israeli Shekel\", id: 21 },\n    { value: \"IDR\", text: \"Indonesian Rupiah\", id: 22 },\n    { value: \"RUB\", text: \"Russian Ruble\", id: 23 },\n  ]);\n\n  const handleSubmit = (e, data) => {\n    if (newCurrencies.length > 0) {\n      setSelectedCurrencies([...selectedCurrencies, ...newCurrencies]);\n    }\n    setModalOpen(false);\n    setNewCurrencies([]);\n  };\n\n  const handleCancel = () => {\n    setModalOpen(false);\n    setNewCurrencies(newCurrencies);\n  };\n\n  const handleChange = (e, data) => {\n    let addedCurrencies = [...newCurrencies];\n    console.log(data);\n    if (data.checked === true) {\n      addedCurrencies.push({\n        value: data.value,\n        text: data.text,\n        id: data.id,\n        delete: \"X\",\n      });\n    } else {\n      addedCurrencies = addedCurrencies.filter((a) => a.value !== data.value);\n    }\n    setNewCurrencies(addedCurrencies);\n    console.log(addedCurrencies);\n  };\n\n  const handleDeleteCurrency = (value, text, id) => {\n    const currencyAddedToOptions = [...options];\n    currencyAddedToOptions.push({ value, text, id });\n    console.log(currencyAddedToOptions);\n    const selectedCurrenciesFiltered = selectedCurrencies.filter(\n      (s) => s.value !== value\n    );\n\n    currencyAddedToOptions.sort(function (a, b) {\n      return a.id - b.id;\n    });\n\n    setSelectedCurrencies(selectedCurrenciesFiltered);\n    setOptions(currencyAddedToOptions);\n  };\n  const selectedValues = selectedCurrencies.map(\n    (selectedValue) => selectedValue.value\n  );\n  useEffect(() => {\n    console.log(selectedValues);\n    const updatedOptions = options.filter(\n      (option) => !selectedValues.includes(option.value)\n    );\n    setOptions(updatedOptions);\n    console.log(options);\n  }, [selectedCurrencies]);\n\n  const modalContent = options.map((option, index) => (\n    <div key={option.id}>\n      <Checkbox\n        toggle\n        onChange={handleChange}\n        value={option.value}\n        text={option.text}\n        id={option.id}\n        // defaultChecked={selectedValues.includes(option.value) ? \"true\" : null}\n      />\n      <span> </span>\n      <div className=\"ui fitted toggle checkbox\">\n        <input type=\"checkbox\" className=\"hidden\" readOnly=\"\" tabIndex=\"0\" />\n\n        <h4>\n          {option.value} <h5>{option.text}</h5>\n        </h4>\n      </div>\n    </div>\n  ));\n\n  const overview = selectedCurrencies.map((selectedCurrency, index) => {\n    console.log(selectedCurrency);\n    return (\n      <tbody key={selectedCurrency[\"id\"]}>\n        <tr>\n          <td>\n            <h4 className=\"ui image header\">\n              <div className=\"content\">\n                1 {selectedCurrency[\"value\"]}\n                <div className=\"sub header\">{selectedCurrency[\"text\"]}</div>\n              </div>\n            </h4>\n          </td>\n          <td>\n            {priceData.rates[selectedCurrency[\"value\"]] !== undefined\n              ? (1 / priceData.rates[selectedCurrency[\"value\"]]).toFixed(4) +\n                `  ${baseCurrency}`\n              : \"1.000 EUR\"}\n          </td>\n          <td className=\"narrow\">\n            {selectedCurrency[\"delete\"] === \"X\" ? (\n              <Button\n                icon=\"delete\"\n                size=\"medium\"\n                className=\"red\"\n                onClick={() =>\n                  handleDeleteCurrency(\n                    selectedCurrency[\"value\"],\n                    selectedCurrency[\"text\"],\n                    selectedCurrency[\"id\"]\n                  )\n                }\n              />\n            ) : (\n              <Button icon=\"delete\" size=\"medium\" className=\"red\" disabled />\n            )}\n          </td>\n        </tr>\n      </tbody>\n    );\n  });\n\n  return (\n    <div className=\"currency-table\">\n      <table className=\"ui celled padded table\">\n        <thead>\n          <tr>\n            <th>Currency</th>\n            <th>Rate</th>\n            <th>Remove</th>\n          </tr>\n        </thead>\n        {overview}\n      </table>\n      <div className=\"currency-add-button\">\n        <Button className=\"blue\" onClick={() => setModalOpen(true)}>\n          +\n        </Button>\n      </div>\n      <Modal\n        closeIcon\n        open={modalOpen}\n        onSubmit={handleSubmit}\n        size=\"mini\"\n        className=\"modal\"\n        onClose={() => setModalOpen(false)}\n        onOpen={() => setModalOpen(true)}\n      >\n        <Modal.Content scrolling>{modalContent}</Modal.Content>\n\n        <Modal.Actions>\n          <Button\n            type=\"cancel\"\n            color=\"red\"\n            content=\"Close\"\n            modalContent={modalContent}\n            onClick={handleCancel}\n          />\n          <Button\n            type=\"submit\"\n            color=\"green\"\n            content=\"Save\"\n            modalContent={modalContent}\n            onClick={handleSubmit}\n          />\n        </Modal.Actions>\n      </Modal>\n    </div>\n  );\n};\n\nexport default CurrencyTable;\n","/Users/ozgursayin/Desktop/Coding/React/forex/src/components/Wallet.jsx",["57","58","59","60","61","62"],"import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport { Dimmer, Loader, Select, Input, Form } from \"semantic-ui-react\";\n\nconst Wallet = () => {\n  const [loading, setLoading] = useState(true);\n  const [priceData, setPriceData] = useState();\n  const [fromCurrency, setFromCurrency] = useState(\"TRY\");\n  const [toCurrency, setToCurrency] = useState(\"TRY\");\n  const [toCurrencyValue, setToCurrencyValue] = useState(0);\n  const [total, setTotal] = useState([]);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [selectedCurrencies, setSelectedCurrencies] = useState([\n    { value: \"USD\", text: \"US Dollar\", id: 1, flag: \"us flag\" },\n    { value: \"EUR\", text: \"Euro\", id: 2, flag: \"eu flag\" },\n    { value: \"GBP\", text: \"Pound Sterling\", id: 3, flag: \"uk flag\" },\n    { value: \"TRY\", text: \"Turkish Lira\", id: 4, flag: \"tr flag\" },\n    { value: \"AUD\", text: \"Australian Dollar\", id: 5, flag: \"au flag\" },\n    { value: \"SGD\", text: \"Singapore Dollar\", id: 6, flag: \"sg flag\" },\n    { value: \"CAD\", text: \"Canadian Dollar\", id: 7, flag: \"ca flag\" },\n    { value: \"CHF\", text: \"Swiss Franc\", id: 8, flag: \"ch flag\" },\n    { value: \"DKK\", text: \"Denmark Kron\", id: 9, flag: \"dk flag\" },\n    { value: \"HKD\", text: \"Hong Kong Dollar\", id: 10, flag: \"hk flag\" },\n    { value: \"JPY\", text: \"Japanese Yen\", id: 11, flag: \"jp flag\" },\n    { value: \"SEK\", text: \"Swedish Kron\", id: 12, flag: \"se flag\" },\n    { value: \"ISK\", text: \"Icelandic Kron\", id: 13, flag: \"is flag\" },\n    { value: \"PHP\", text: \"Philippine Peso\", id: 14, flag: \"ph flag\" },\n    { value: \"HUF\", text: \"Hungarian Forint\", id: 15, flag: \"hu flag\" },\n    { value: \"CZK\", text: \"Czech Kron\", id: 16, flag: \"cz flag\" },\n    { value: \"INR\", text: \"Indian Rupee\", id: 17, flag: \"in flag\" },\n    { value: \"CNY\", text: \"Chinese Yuan\", id: 18, flag: \"cn flag\" },\n    { value: \"NZD\", text: \"New Zealand Dollar\", id: 19, flag: \"nz flag\" },\n    { value: \"MXN\", text: \"Mexican Peso\", id: 20, flag: \"mx flag\" },\n    { value: \"ILS\", text: \"Israeli Shekel\", id: 21, flag: \"il flag\" },\n    { value: \"IDR\", text: \"Indonesian Rupiah\", id: 22, flag: \"id flag\" },\n    { value: \"RUB\", text: \"Russian Ruble\", id: 23, flag: \"ru flag\" },\n    { value: \"BRL\", text: \"Brazilian Real\", id: 24, flag: \"br flag\" },\n  ]);\n\n  const options = [\n    { value: \"TRY\", text: \"TRY\" },\n    { value: \"USD\", text: \"USD\" },\n    { value: \"EUR\", text: \"EUR\" },\n    { value: \"GBP\", text: \"GBP\" },\n    { value: \"AUD\", text: \"AUD\" },\n    { value: \"SGD\", text: \"SGD\" },\n    { value: \"BGN\", text: \"BGN\" },\n    { value: \"BRL\", text: \"BRL\" },\n    { value: \"CAD\", text: \"CAD\" },\n    { value: \"CHF\", text: \"CHF\" },\n    { value: \"DKK\", text: \"DKK\" },\n    { value: \"HKD\", text: \"HKD\" },\n    { value: \"JPY\", text: \"JPY\" },\n    { value: \"SEK\", text: \"SEK\" },\n    { value: \"ISK\", text: \"ISK\" },\n    { value: \"PHP\", text: \"PHP\" },\n    { value: \"HUF\", text: \"HUF\" },\n    { value: \"CZK\", text: \"CZK\" },\n    { value: \"INR\", text: \"INR\" },\n    { value: \"CNY\", text: \"CNY\" },\n    { value: \"NZD\", text: \"NZD\" },\n    { value: \"MXN\", text: \"MXN\" },\n    { value: \"ILS\", text: \"ILS\" },\n    { value: \"IDR\", text: \"IDR\" },\n    { value: \"RUB\", text: \"RUB\" },\n  ];\n\n  const BASE_URL_CURRENCY = `https://api.exchangeratesapi.io/latest?base=${fromCurrency}`;\n\n  const fetchCurrencies = async () => {\n    setLoading(true);\n    const result = await fetch(BASE_URL_CURRENCY);\n    const resultCurrencies = await result.json();\n    console.log(resultCurrencies);\n    console.log({ ...resultCurrencies.rates, EUR: 1 });\n    if (fromCurrency === \"EUR\") {\n      const euroResultCurrencies = {\n        ...resultCurrencies,\n        rates: { ...resultCurrencies.rates, EUR: 1 },\n      };\n\n      setPriceData(euroResultCurrencies);\n      setLoading(false);\n      return;\n    }\n    setPriceData(resultCurrencies);\n    setLoading(false);\n  };\n  //console.log(priceData && priceData.rates[toCurrency]);\n  useEffect(() => {\n    fetchCurrencies();\n    setTotalAmount(0);\n  }, []);\n\n  //   const getLatestCurrencyData = async () => {\n  //     const response = await fetch(`${BASE_URL_CURRENCY}&base=TRY`);\n  //     const data = await response.json();\n  //     // if (fromCurrency === \"EUR\" && toCurrency === \"EUR\") {\n  //     //   setPriceData(\"1.0000\");\n  //     //   return;\n  //     // }\n\n  //     Object.keys(data.rates).forEach((key) => {\n  //       console.log(key);\n  //     });\n  //     Object.values(data.rates).forEach((value) => {\n  //       console.log(value);\n  //     });\n  //     console.log(data.rates);\n  //     setPriceData(data.rates);\n  //     setLoading(false);\n  //   };\n\n  useEffect(() => {\n    fetchCurrencies();\n    setTotalAmount(0);\n  }, [fromCurrency, toCurrency]);\n\n  if (priceData) {\n    Object.entries(priceData.rates).map(([key, value]) => ({\n      [key]: value,\n    }));\n  }\n\n  const handleFromSelect = (e, data) => {\n    setFromCurrency(data.value);\n    const currencies = [...selectedCurrencies];\n    console.log(currencies);\n  };\n\n  // const handleToSelect = (e, data) => {\n  //   setToCurrency(data.value);\n  // };\n  // console.log(toCurrency);\n\n  const currencyConvert = (e, data) => {\n    console.log(priceData);\n    setToCurrencyValue(\n      priceData &&\n        parseFloat(toCurrencyValue) +\n          (data.value * (1 / priceData.rates[data.id])).toFixed(4)\n    );\n    // setTotal([]);\n    let result = total;\n\n    if (data) {\n      result[data.id] = {\n        [data.id]: parseFloat(\n          data.value * parseFloat(1 / priceData.rates[data.id])\n        ).toFixed(4),\n      };\n    }\n    //setTotal(result);\n    const totalValueObject = Object.values(total);\n    let totalValueNumber = 0;\n    totalValueObject.forEach(\n      (t) => (totalValueNumber += parseFloat(Object.values(t)))\n    );\n    console.log(total);\n    setTotalAmount(totalValueNumber);\n  };\n\n  if (loading || !priceData) {\n    return <h1 style={{ color: \"white\" }}>Loading...</h1>;\n  }\n\n  return (\n    <div>\n      {loading ? (\n        <div>\n          <Dimmer active inverted>\n            <Loader>Loading</Loader>\n          </Dimmer>\n        </div>\n      ) : (\n        <div className=\"currency-list\">\n          <div className=\"form\">\n            <tbody key={1}>\n              <tr>\n                {selectedCurrencies.map((s) => (\n                  <div>\n                    <td>\n                      <div className=\"ui segment\">\n                        <i className={s.flag}> </i>\n                        <Input\n                          placeholder=\"Select your currency\"\n                          onChange={handleFromSelect}\n                          options={options}\n                          value={`${s.value}   ${s.text}`}\n                        />\n                        <Input onChange={currencyConvert} id={s.value} />\n                      </div>\n                    </td>\n                  </div>\n                ))}\n\n                <div className=\"base-currency\">\n                  <td>\n                    <Select\n                      placeholder=\"Select your currency\"\n                      onChange={handleFromSelect}\n                      options={options}\n                      value={fromCurrency}\n                    ></Select>\n\n                    <Input value={totalAmount.toFixed(4)} />\n                  </td>\n                </div>\n              </tr>\n            </tbody>\n          </div>\n\n          <div className=\"time-stamp\">\n            {new Date().toJSON().slice(0, 10)}\n            {\"  \"}\n            {new Date().toJSON().slice(11, 19)} GMT\n          </div>\n        </div>\n      )}\n      {/* <CurrencyTable baseCurrency={fromCurrency} priceData={priceData} /> */}\n    </div>\n  );\n};\n\nexport default Wallet;\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":3,"column":40,"nodeType":"69","messageId":"70","endLine":3,"endColumn":44},{"ruleId":"67","severity":1,"message":"71","line":18,"column":9,"nodeType":"69","messageId":"70","endLine":18,"endColumn":32},{"ruleId":"67","severity":1,"message":"72","line":149,"column":9,"nodeType":"69","messageId":"70","endLine":149,"endColumn":32},{"ruleId":"73","severity":1,"message":"74","line":167,"column":6,"nodeType":"75","endLine":167,"endColumn":43,"suggestions":"76"},{"ruleId":"67","severity":1,"message":"77","line":2,"column":18,"nodeType":"69","messageId":"70","endLine":2,"endColumn":24},{"ruleId":"67","severity":1,"message":"78","line":2,"column":26,"nodeType":"69","messageId":"70","endLine":2,"endColumn":32},{"ruleId":"67","severity":1,"message":"79","line":2,"column":34,"nodeType":"69","messageId":"70","endLine":2,"endColumn":40},{"ruleId":"73","severity":1,"message":"80","line":57,"column":6,"nodeType":"75","endLine":57,"endColumn":8,"suggestions":"81"},{"ruleId":"73","severity":1,"message":"80","line":80,"column":6,"nodeType":"75","endLine":80,"endColumn":20,"suggestions":"82"},{"ruleId":"73","severity":1,"message":"83","line":97,"column":6,"nodeType":"75","endLine":97,"endColumn":26,"suggestions":"84"},{"ruleId":"67","severity":1,"message":"85","line":3,"column":41,"nodeType":"69","messageId":"70","endLine":3,"endColumn":45},{"ruleId":"67","severity":1,"message":"86","line":9,"column":22,"nodeType":"69","messageId":"70","endLine":9,"endColumn":35},{"ruleId":"67","severity":1,"message":"87","line":11,"column":17,"nodeType":"69","messageId":"70","endLine":11,"endColumn":25},{"ruleId":"67","severity":1,"message":"88","line":13,"column":30,"nodeType":"69","messageId":"70","endLine":13,"endColumn":51},{"ruleId":"73","severity":1,"message":"80","line":93,"column":6,"nodeType":"75","endLine":93,"endColumn":8,"suggestions":"89"},{"ruleId":"73","severity":1,"message":"80","line":117,"column":6,"nodeType":"75","endLine":117,"endColumn":32,"suggestions":"90"},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'HISTORICAL_BITCOIN_DATA' is assigned a value but never used.","'fetchCurrentBitcoinData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getHistoricalCurrencyData' and 'getLatestCurrencyData'. Either include them or remove the dependency array.","ArrayExpression",["93"],"'Dimmer' is defined but never used.","'Loader' is defined but never used.","'Select' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchCurrencies'. Either include it or remove the dependency array.",["94"],["95"],"React Hook useEffect has missing dependencies: 'options' and 'selectedValues'. Either include them or remove the dependency array.",["96"],"'Form' is defined but never used.","'setToCurrency' is assigned a value but never used.","'setTotal' is assigned a value but never used.","'setSelectedCurrencies' is assigned a value but never used.",["97"],["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"101","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [toCurrency, fromCurrency, timeRange, getHistoricalCurrencyData, getLatestCurrencyData]",{"range":"110","text":"111"},"Update the dependencies array to be: [fetchCurrencies]",{"range":"112","text":"113"},"Update the dependencies array to be: [fetchCurrencies, fromCurrency]",{"range":"114","text":"115"},"Update the dependencies array to be: [options, selectedCurrencies, selectedValues]",{"range":"116","text":"117"},{"range":"118","text":"113"},"Update the dependencies array to be: [fetchCurrencies, fromCurrency, toCurrency]",{"range":"119","text":"120"},[5393,5430],"[toCurrency, fromCurrency, timeRange, getHistoricalCurrencyData, getLatestCurrencyData]",[1760,1762],"[fetchCurrencies]",[2425,2439],"[fetchCurrencies, fromCurrency]",[3427,3447],"[options, selectedCurrencies, selectedValues]",[3976,3978],[4664,4690],"[fetchCurrencies, fromCurrency, toCurrency]"]